#include <KMS.h>
#include <KM_Accessors.h>
#include <KM_Data.h>
#include <KM_EEPROM.h>
#include <MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>

#define WRITE_MIDI
//#define WRITE_TEST_DATA

#define BLINK_INTERVAL    50
#define ESPERA_EEPROM     2000
#define MAX_PACKET_TIME   50
#define PACKET_SIZE       200

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
#define MAX_PACKETS_NUM   20
#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega32U4__)
#define MAX_PACKETS_NUM   5
#endif

#if defined(WRITE_MIDI)
MIDI_CREATE_DEFAULT_INSTANCE()
#endif
#if defined(WRITE_TEST_DATA)
static const byte test_data[] ={
  //Simple test, 3B x 1US/3I/3O
  //89, 84, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 0, 100, 0, 127, 0, 0, 127, 255, 2, 0, 100, 0, 127, 0, 10, 0, 101, 0, 127, 0, 20, 0, 2, 0, 127, 0, 1, 0, 1, 84, 1, 1, 1, 84, 1, 2, 0, 84, 1, 3, 0, 84, 82, 0, 110, 0, 127, 0, 0, 127, 255, 81, 0, 110, 0, 127, 1, 89, 0, 111, 0, 127, 1, 97, 0, 112, 0, 127, 1, 1, 0, 12, 84, 1, 1, 12, 84, 1, 2, 12, 84, 1, 3, 12, 84, 19, 17, 24, 2, 64, 0, 0, 127, 255, 19, 17, 25, 2, 64, 1, 19, 17, 26, 2, 64, 1, 19, 17, 27, 2, 64, 1, 16, 20, 42, 100, 16, 21, 42, 100, 16, 22, 42, 100, 16, 23, 42, 100

  //Full test, 4B x 1US/24I/24O
  //89, 84, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 24, 24, 2, 0, 100, 0, 127, 0, 0, 127, 255, 2, 0, 100, 0, 127, 0, 10, 0, 101, 0, 127, 0, 20, 0, 2, 0, 127, 0, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 1, 84, 1, 1, 1, 84, 1, 2, 0, 84, 1, 3, 0, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 82, 0, 110, 0, 127, 0, 0, 127, 255, 81, 0, 110, 0, 127, 1, 89, 0, 111, 0, 127, 1, 97, 0, 112, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 12, 84, 1, 1, 12, 84, 1, 2, 12, 84, 1, 3, 12, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 19, 17, 24, 2, 64, 0, 0, 127, 255, 19, 17, 25, 2, 64, 1, 19, 17, 26, 2, 64, 1, 19, 17, 27, 2, 64, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 16, 20, 42, 100, 16, 21, 42, 100, 16, 22, 42, 100, 16, 23, 42, 100, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 0, 0, 0, 0, 127, 0, 0, 127, 255, 1, 0, 0, 0, 127, 1, 1, 0, 1, 0, 127, 1, 1, 0, 2, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 42, 84, 1, 1, 42, 84, 1, 2, 42, 84, 1, 3, 42, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84
  //OK

  //MEGA config in Uno stress test (full payload)
  //89, 84, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 30, 30, 2, 0, 100, 0, 127, 0, 0, 127, 255, 2, 0, 100, 0, 127, 0, 10, 0, 101, 0, 127, 0, 20, 0, 2, 0, 127, 0, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 1, 0, 1, 84, 1, 1, 1, 84, 1, 2, 0, 84, 1, 3, 0, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 82, 0, 110, 0, 127, 0, 0, 127, 255, 81, 0, 110, 0, 127, 1, 89, 0, 111, 0, 127, 1, 97, 0, 112, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 1, 0, 12, 84, 1, 1, 12, 84, 1, 2, 12, 84, 1, 3, 12, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 19, 17, 24, 2, 64, 0, 0, 127, 255, 19, 17, 25, 2, 64, 1, 19, 17, 26, 2, 64, 1, 19, 17, 27, 2, 64, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 16, 20, 42, 100, 16, 21, 42, 100, 16, 22, 42, 100, 16, 23, 42, 100, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 0, 0, 0, 0, 127, 0, 0, 127, 255, 1, 0, 0, 0, 127, 1, 1, 0, 1, 0, 127, 1, 1, 0, 2, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 1, 0, 42, 84, 1, 1, 42, 84, 1, 2, 42, 84, 1, 3, 42, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84
  //OK (Failed gracefully, YTX header was )

  //MEGA config in Uno stress test (incomplete bytes)
  //89, 84, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 30, 30, 2, 0, 100, 0, 127, 0, 0, 127, 255, 2, 0, 100, 0, 127, 0, 10, 0, 101, 0, 127, 0, 20, 0, 2, 0, 127, 0, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 1, 0, 1, 84, 1, 1, 1, 84, 1, 2, 0, 84, 1, 3, 0, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 82, 0, 110, 0, 127, 0, 0, 127, 255, 81, 0, 110, 0, 127, 1, 89, 0, 111, 0, 127, 1, 97, 0, 112, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 1, 0, 12, 84, 1, 1, 12, 84, 1, 2, 12, 84, 1, 3, 12, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 19, 17, 24, 2, 64, 0, 0, 127, 255, 19, 17, 25, 2, 64, 1, 19, 17, 26, 2, 64, 1, 19, 17, 27, 2, 64, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127, 1, 1, 0, 10, 0, 127, 1, 1, 0, 11, 0, 127, 1, 1, 0, 12, 0, 127, 1, 1, 0, 13, 0, 127, 1, 1, 0, 14, 0, 127, 1, 1, 0, 15, 0, 127, 1, 1, 0, 16, 0, 127, 1, 1, 0, 17, 0, 127, 1, 1, 0, 18, 0, 127, 1, 1, 0, 19, 0, 127, 1, 1, 0, 20, 0, 127, 1, 1, 0, 21, 0, 127, 1, 1, 0, 22, 0, 127, 1, 1, 0, 23, 0, 127, 1, 1, 0, 24, 0, 127, 1, 1, 0, 25, 0, 127, 1, 1, 0, 26, 0, 127, 1, 1, 0, 27, 0, 127, 1, 1, 0, 28, 0, 127, 1, 1, 0, 29, 0, 127, 1, 16, 20, 42, 100, 16, 21, 42, 100, 16, 22, 42, 100, 16, 23, 42, 100, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 0, 0, 0, 0, 127, 0, 0, 127, 255, 1, 0, 0, 0, 127, 1, 1, 0, 1, 0, 127, 1, 1, 0, 2, 0, 127, 1, 1, 0, 3, 0, 127, 1, 1, 0, 4, 0, 127, 1, 1, 0, 5, 0, 127, 1, 1, 0, 6, 0, 127, 1, 1, 0, 7, 0, 127, 1, 1, 0, 8, 0, 127, 1, 1, 0, 9, 0, 127
  //OK (Failed gracefully, only loaded 3 "real banks" out of configured 4)

  //Many outs test, 4B x 1US/1I/59O
  89, 84, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 59, 2, 0, 100, 0, 127, 0, 0, 127, 255, 2, 0, 100, 0, 127, 0, 1, 0, 1, 84, 1, 1, 1, 84, 1, 2, 0, 84, 1, 3, 0, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 1, 30, 42, 84, 1, 31, 42, 84, 1, 32, 42, 84, 1, 33, 42, 84, 1, 34, 42, 84, 1, 35, 42, 84, 1, 36, 42, 84, 1, 37, 42, 84, 1, 38, 42, 84, 1, 39, 42, 84, 1, 40, 42, 84, 1, 41, 42, 84, 1, 42, 42, 84, 1, 43, 42, 84, 1, 44, 42, 84, 1, 45, 42, 84, 1, 46, 42, 84, 1, 47, 42, 84, 1, 48, 42, 84, 1, 49, 42, 84, 1, 50, 42, 84, 1, 51, 42, 84, 1, 52, 42, 84, 1, 53, 42, 84, 1, 54, 42, 84, 1, 55, 42, 84, 1, 56, 42, 84, 1, 57, 42, 84, 1, 58, 42, 84, 82, 0, 110, 0, 127, 0, 0, 127, 255, 81, 0, 110, 0, 127, 1, 1, 0, 12, 84, 1, 1, 12, 84, 1, 2, 12, 84, 1, 3, 12, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 1, 30, 42, 84, 1, 31, 42, 84, 1, 32, 42, 84, 1, 33, 42, 84, 1, 34, 42, 84, 1, 35, 42, 84, 1, 36, 42, 84, 1, 37, 42, 84, 1, 38, 42, 84, 1, 39, 42, 84, 1, 40, 42, 84, 1, 41, 42, 84, 1, 42, 42, 84, 1, 43, 42, 84, 1, 44, 42, 84, 1, 45, 42, 84, 1, 46, 42, 84, 1, 47, 42, 84, 1, 48, 42, 84, 1, 49, 42, 84, 1, 50, 42, 84, 1, 51, 42, 84, 1, 52, 42, 84, 1, 53, 42, 84, 1, 54, 42, 84, 1, 55, 42, 84, 1, 56, 42, 84, 1, 57, 42, 84, 1, 58, 42, 84, 19, 17, 24, 2, 64, 0, 0, 127, 255, 19, 17, 25, 2, 64, 1, 16, 20, 42, 100, 16, 21, 42, 100, 16, 22, 42, 100, 16, 23, 42, 100, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 1, 30, 42, 84, 1, 31, 42, 84, 1, 32, 42, 84, 1, 33, 42, 84, 1, 34, 42, 84, 1, 35, 42, 84, 1, 36, 42, 84, 1, 37, 42, 84, 1, 38, 42, 84, 1, 39, 42, 84, 1, 40, 42, 84, 1, 41, 42, 84, 1, 42, 42, 84, 1, 43, 42, 84, 1, 44, 42, 84, 1, 45, 42, 84, 1, 46, 42, 84, 1, 47, 42, 84, 1, 48, 42, 84, 1, 49, 42, 84, 1, 50, 42, 84, 1, 51, 42, 84, 1, 52, 42, 84, 1, 53, 42, 84, 1, 54, 42, 84, 1, 55, 42, 84, 1, 56, 42, 84, 1, 57, 42, 84, 1, 58, 42, 84, 0, 0, 0, 0, 127, 0, 0, 127, 255, 1, 0, 0, 0, 127, 1, 1, 0, 42, 84, 1, 1, 42, 84, 1, 2, 42, 84, 1, 3, 42, 84, 1, 4, 42, 84, 1, 5, 42, 84, 1, 6, 42, 84, 1, 7, 42, 84, 1, 8, 42, 84, 1, 9, 42, 84, 1, 10, 42, 84, 1, 11, 42, 84, 1, 12, 42, 84, 1, 13, 42, 84, 1, 14, 42, 84, 1, 15, 42, 84, 1, 16, 42, 84, 1, 17, 42, 84, 1, 18, 42, 84, 1, 19, 42, 84, 1, 20, 42, 84, 1, 21, 42, 84, 1, 22, 42, 84, 1, 23, 42, 84, 1, 24, 42, 84, 1, 25, 42, 84, 1, 26, 42, 84, 1, 27, 42, 84, 1, 28, 42, 84, 1, 29, 42, 84, 1, 30, 42, 84, 1, 31, 42, 84, 1, 32, 42, 84, 1, 33, 42, 84, 1, 34, 42, 84, 1, 35, 42, 84, 1, 36, 42, 84, 1, 37, 42, 84, 1, 38, 42, 84, 1, 39, 42, 84, 1, 40, 42, 84, 1, 41, 42, 84, 1, 42, 42, 84, 1, 43, 42, 84, 1, 44, 42, 84, 1, 45, 42, 84, 1, 46, 42, 84, 1, 47, 42, 84, 1, 48, 42, 84, 1, 49, 42, 84, 1, 50, 42, 84, 1, 51, 42, 84, 1, 52, 42, 84, 1, 53, 42, 84, 1, 54, 42, 84, 1, 55, 42, 84, 1, 56, 42, 84, 1, 57, 42, 84, 1, 58, 42, 84
};
#endif
const byte *pMsg;
//const byte *dataBuffer[MAX_PACKETS_NUM];
int sysexLength;
unsigned int dataIndex[MAX_PACKETS_NUM];
byte dataToWrite;
byte dataBuffer[400];

bool flagBlink = 0, flagWait = 0, receiving = 0;
byte blinkCount = 0;
unsigned long millisAnt = 0;

static const char * const modeLabels[] = {
    "Off"
  , "Note"
  , "CC"
  , "NRPN"
  , "PC"
  , "Shifter"
};
#define MODE_LABEL(m)   ((m) <= KMS::M_SHIFTER ? modeLabels[m] : "???")


void printGlobalData(const char *lbl, const KMS::GlobalData &d) {
  DEBUG_PRINT(lbl, "");
  DEBUG_PRINT("\t[byte length]", d.length);
  DEBUG_PRINT("\tIs Valid", d.isValid() ? "true" : "false");
  DEBUG_PRINT("\tProtocol version", d.protocolVersion());
  DEBUG_PRINT("\tHas Output Matrix", d.hasOutputMatrix() ? "true" : "false");
  DEBUG_PRINT("\tNum banks", d.numBanks());
  DEBUG_PRINT("\tNum inputs normal", d.numInputsNorm());
  DEBUG_PRINT("\tNum outputs", d.numOutputs());
}

void printInputNorm(const char *lbl, const KMS::InputNorm &d, int i) {
  DEBUG_PRINT(lbl, i);
  DEBUG_PRINT("\t[byte length]", d.length);
  DEBUG_PRINT("\tAnalog", d.analog() ? "analog" : "digital");

  DEBUG_PRINT("\tMode", MODE_LABEL(d.mode()));
  DEBUG_PRINT("\tChannel", d.channel()+1);          // channel 1-16
  DEBUG_PRINT("\tParam fine (nrpn)", d.param_fine());
    DEBUG_PRINT("\tParam coarse", d.param_coarse());
    DEBUG_PRINT("\tParam full NRPN", (d.param_coarse() << 7) | d.param_fine());
    DEBUG_PRINT("\tMin", d.param_min_coarse());
    DEBUG_PRINT("\tMax", d.param_max_coarse());
}

void printInputUS(const char *lbl, const KMS::InputUS &d, int i) {
  DEBUG_PRINT(lbl, i);
  DEBUG_PRINT("\t[byte length]", d.length);
  DEBUG_PRINT("\tDist Min", d.dist_min());
  DEBUG_PRINT("\tDist Max", d.dist_max());

  DEBUG_PRINT("\tMode", MODE_LABEL(d.mode()));
  DEBUG_PRINT("\tChannel", d.channel()+1);        // channel 1-16
  DEBUG_PRINT("\tParam fine (nrpn)", d.param_fine());
  DEBUG_PRINT("\tParam coarse", d.param_coarse());
//  DEBUG_PRINT("\tParam full NRPN", (d.param_coarse() << 7) | d.param_fine());
//  DEBUG_PRINT("\tParam Min", d.param_min_coarse());
//  DEBUG_PRINT("\tParam Max", d.param_max_coarse());
}

void printOutput(const char *lbl, const KMS::Output &d, int i) {
    DEBUG_PRINT(lbl, i);
    DEBUG_PRINT("\t[byte length]", d.length);
    DEBUG_PRINT("\tChannel", d.channel());          // channel 1-16
    DEBUG_PRINT("\tNote", d.note());
    DEBUG_PRINT("\tBlink", d.blink());
    DEBUG_PRINT("\tBlink Min", d.blink_min());
    DEBUG_PRINT("\tBlink Max", d.blink_max());
}

void setup() {
  // put your setup code here, to run once:
  #if defined(WRITE_MIDI)
  //MIDI.setHandleSystemExclusive(handle_sysex);
  MIDI.begin(MIDI_CHANNEL_OMNI); MIDI.turnThruOff();
  #else
  Serial.begin(115200); 
  #endif
  
  
    
  #if !defined(WRITE_MIDI) && !defined(WRITE_TEST_DATA)
   KMS::initialize();
   KMS::GlobalData gd = KMS::globalData();
    printGlobalData("Global data", gd);
    DEBUG_PRINT("real banks", KMS::realBanks());
    for(byte bank = 0; bank < KMS::realBanks(); bank++) {
      DEBUG_PRINT("---------------------BANK #", bank);
      KMS::setBank(bank);

      printInputUS("Input US", KMS::ultrasound(), 0);
      byte count = gd.numInputsNorm();
      for(byte i = 0; i<count; i++) {
        printInputNorm("Input Norm", KMS::input(i), i);
      }
      count = gd.numOutputs();
      for(byte i = 0; i<count; i++) {
        printOutput("Output", KMS::output(i), i);
      }
    }
//    for(byte i = 0; i<MAX_PACKETS_NUM; i++) {
//      dataBuffer[i] = NULL;
//      sysexLength[i] = 0;
//    }
//  unsigned int len = KMS::io.length();
//  unsigned int address = 0;
//  while(len--)
//    Serial.println(EEPROM.read(address++));
  #endif
  #if !defined(WRITE_MIDI) && defined(WRITE_TEST_DATA)
  unsigned long antMicros = micros();
  KMS::io.write(0, test_data, 1000);
  Serial.print("EEPROM escrita en ");Serial.print(millis()-antMicros);Serial.println(" us");
  Serial.println(sizeof(test_data));
  #endif
}

void loop() {

  
  // put your main code here, to run repeatedly:
#if defined(WRITE_MIDI) && !defined(WRITE_TEST_DATA)
  static bool lastLEDState = LOW;
  static unsigned long millisPrev = 0;
  static bool firstTime = true;
  
//  if(flagBlink && blinkCount){
//    if (firstTime){ firstTime = false; millisPrev = millis(); }
//    if(millis()-millisPrev > BLINK_INTERVAL){
//      millisPrev = millis();
//      digitalWrite(13, !lastLEDState);
//      lastLEDState = !lastLEDState;
//      if(lastLEDState == LOW) blinkCount--;
//      if(!blinkCount){ flagBlink = 0; firstTime = true; }
//    }
//  }
  
  if (MIDI.read()){                // If we have received a message
    if(MIDI.getType() == midi::SystemExclusive){
      sysexLength = (int) MIDI.getSysExArrayLength(); 
      pMsg = MIDI.getSysExArray();
      
      char sysexID[3];
      sysexID[0] = (char) pMsg[1]; 
      sysexID[1] = (char) pMsg[2]; 
      sysexID[2] = (char) pMsg[3];
        
      char command = pMsg[4];
      
      if(sysexID[0] == 'Y' && sysexID[1] == 'T' && sysexID[2] == 'X'){

        if (command == 1){            // Enter config mode
          for(int i=0; i<3;i++){
            flagBlink = 1;
            blinkCount = 1;
           //configMode = 1;
          }
        }                             
//          
        if(command == 3 ){             // Save dump data
          KMS::io.write(200*pMsg[5], pMsg+6, sysexLength-7);            
//          byte index = pMsg[5];
//          dataIndex[index] = index;
          MIDI.sendNoteOn(pMsg[5],127,1);
//          MIDI.sendPitchBend((int) (millis()-antMillisRead),1);
//          sysexLength[index] = (int) MIDI.getSysExArrayLength(); 
//          memcpy(dataBuffer+PACKET_SIZE*index,pMsg+6,sysexLength[index]-7);
//          receiving = true;
//          antMillisLastPacket = millis();
          flagBlink = 1;
          blinkCount = 2; 
        }
      }
    }  
  }  
#endif
}
//void EEPROM_IO_WRITE(int address, const byte *buf, int len) {
//    address += KMS_DATA_START;
//    while(len--)
//      EEPROM.update(address++, *(buf++));   //Update only writes if the value changed (extends EEPROM lifetime)
//  }
